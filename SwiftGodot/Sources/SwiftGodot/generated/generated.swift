// This file is autogenerated, do not edit
import Foundation
import GDExtension

public enum Side: Int {
    case left = 0 // SIDE_LEFT
    case top = 1 // SIDE_TOP
    case right = 2 // SIDE_RIGHT
    case bottom = 3 // SIDE_BOTTOM
}

public enum Corner: Int {
    case topLeft = 0 // CORNER_TOP_LEFT
    case topRight = 1 // CORNER_TOP_RIGHT
    case bottomRight = 2 // CORNER_BOTTOM_RIGHT
    case bottomLeft = 3 // CORNER_BOTTOM_LEFT
}

public enum Orientation: Int {
    case vertical = 1 // VERTICAL
    case horizontal = 0 // HORIZONTAL
}

public enum ClockDirection: Int {
    case clockwise = 0 // CLOCKWISE
    case counterclockwise = 1 // COUNTERCLOCKWISE
}

public enum HorizontalAlignment: Int {
    case left = 0 // HORIZONTAL_ALIGNMENT_LEFT
    case center = 1 // HORIZONTAL_ALIGNMENT_CENTER
    case right = 2 // HORIZONTAL_ALIGNMENT_RIGHT
    case fill = 3 // HORIZONTAL_ALIGNMENT_FILL
}

public enum VerticalAlignment: Int {
    case top = 0 // VERTICAL_ALIGNMENT_TOP
    case center = 1 // VERTICAL_ALIGNMENT_CENTER
    case bottom = 2 // VERTICAL_ALIGNMENT_BOTTOM
    case fill = 3 // VERTICAL_ALIGNMENT_FILL
}

public enum InlineAlignment: Int {
    case centerTo = 1 // INLINE_ALIGNMENT_CENTER_TO
    case baselineTo = 3 // INLINE_ALIGNMENT_BASELINE_TO
    case bottomTo = 2 // INLINE_ALIGNMENT_BOTTOM_TO
    case toCenter = 4 // INLINE_ALIGNMENT_TO_CENTER
    case toBaseline = 8 // INLINE_ALIGNMENT_TO_BASELINE
    case toBottom = 12 // INLINE_ALIGNMENT_TO_BOTTOM
    case top = 0 // INLINE_ALIGNMENT_TOP
    case center = 5 // INLINE_ALIGNMENT_CENTER
    case bottom = 14 // INLINE_ALIGNMENT_BOTTOM
}

public enum EulerOrder: Int {
    case xyz = 0 // EULER_ORDER_XYZ
    case xzy = 1 // EULER_ORDER_XZY
    case yxz = 2 // EULER_ORDER_YXZ
    case yzx = 3 // EULER_ORDER_YZX
    case zxy = 4 // EULER_ORDER_ZXY
    case zyx = 5 // EULER_ORDER_ZYX
}

public enum Key: Int {
    case none = 0 // KEY_NONE
    case special = 4194304 // KEY_SPECIAL
    case escape = 4194305 // KEY_ESCAPE
    case tab = 4194306 // KEY_TAB
    case backtab = 4194307 // KEY_BACKTAB
    case backspace = 4194308 // KEY_BACKSPACE
    case enter = 4194309 // KEY_ENTER
    case kpEnter = 4194310 // KEY_KP_ENTER
    case insert = 4194311 // KEY_INSERT
    case delete = 4194312 // KEY_DELETE
    case pause = 4194313 // KEY_PAUSE
    case print = 4194314 // KEY_PRINT
    case sysreq = 4194315 // KEY_SYSREQ
    case clear = 4194316 // KEY_CLEAR
    case home = 4194317 // KEY_HOME
    case end = 4194318 // KEY_END
    case left = 4194319 // KEY_LEFT
    case up = 4194320 // KEY_UP
    case right = 4194321 // KEY_RIGHT
    case down = 4194322 // KEY_DOWN
    case pageup = 4194323 // KEY_PAGEUP
    case pagedown = 4194324 // KEY_PAGEDOWN
    case shift = 4194325 // KEY_SHIFT
    case ctrl = 4194326 // KEY_CTRL
    case meta = 4194327 // KEY_META
    case alt = 4194328 // KEY_ALT
    case capslock = 4194329 // KEY_CAPSLOCK
    case numlock = 4194330 // KEY_NUMLOCK
    case scrolllock = 4194331 // KEY_SCROLLLOCK
    case f1 = 4194332 // KEY_F1
    case f2 = 4194333 // KEY_F2
    case f3 = 4194334 // KEY_F3
    case f4 = 4194335 // KEY_F4
    case f5 = 4194336 // KEY_F5
    case f6 = 4194337 // KEY_F6
    case f7 = 4194338 // KEY_F7
    case f8 = 4194339 // KEY_F8
    case f9 = 4194340 // KEY_F9
    case f10 = 4194341 // KEY_F10
    case f11 = 4194342 // KEY_F11
    case f12 = 4194343 // KEY_F12
    case f13 = 4194344 // KEY_F13
    case f14 = 4194345 // KEY_F14
    case f15 = 4194346 // KEY_F15
    case f16 = 4194347 // KEY_F16
    case f17 = 4194348 // KEY_F17
    case f18 = 4194349 // KEY_F18
    case f19 = 4194350 // KEY_F19
    case f20 = 4194351 // KEY_F20
    case f21 = 4194352 // KEY_F21
    case f22 = 4194353 // KEY_F22
    case f23 = 4194354 // KEY_F23
    case f24 = 4194355 // KEY_F24
    case f25 = 4194356 // KEY_F25
    case f26 = 4194357 // KEY_F26
    case f27 = 4194358 // KEY_F27
    case f28 = 4194359 // KEY_F28
    case f29 = 4194360 // KEY_F29
    case f30 = 4194361 // KEY_F30
    case f31 = 4194362 // KEY_F31
    case f32 = 4194363 // KEY_F32
    case f33 = 4194364 // KEY_F33
    case f34 = 4194365 // KEY_F34
    case f35 = 4194366 // KEY_F35
    case kpMultiply = 4194433 // KEY_KP_MULTIPLY
    case kpDivide = 4194434 // KEY_KP_DIVIDE
    case kpSubtract = 4194435 // KEY_KP_SUBTRACT
    case kpPeriod = 4194436 // KEY_KP_PERIOD
    case kpAdd = 4194437 // KEY_KP_ADD
    case kp0 = 4194438 // KEY_KP_0
    case kp1 = 4194439 // KEY_KP_1
    case kp2 = 4194440 // KEY_KP_2
    case kp3 = 4194441 // KEY_KP_3
    case kp4 = 4194442 // KEY_KP_4
    case kp5 = 4194443 // KEY_KP_5
    case kp6 = 4194444 // KEY_KP_6
    case kp7 = 4194445 // KEY_KP_7
    case kp8 = 4194446 // KEY_KP_8
    case kp9 = 4194447 // KEY_KP_9
    case menu = 4194370 // KEY_MENU
    case hyper = 4194371 // KEY_HYPER
    case help = 4194373 // KEY_HELP
    case back = 4194376 // KEY_BACK
    case forward = 4194377 // KEY_FORWARD
    case stop = 4194378 // KEY_STOP
    case refresh = 4194379 // KEY_REFRESH
    case volumedown = 4194380 // KEY_VOLUMEDOWN
    case volumemute = 4194381 // KEY_VOLUMEMUTE
    case volumeup = 4194382 // KEY_VOLUMEUP
    case mediaplay = 4194388 // KEY_MEDIAPLAY
    case mediastop = 4194389 // KEY_MEDIASTOP
    case mediaprevious = 4194390 // KEY_MEDIAPREVIOUS
    case medianext = 4194391 // KEY_MEDIANEXT
    case mediarecord = 4194392 // KEY_MEDIARECORD
    case homepage = 4194393 // KEY_HOMEPAGE
    case favorites = 4194394 // KEY_FAVORITES
    case search = 4194395 // KEY_SEARCH
    case standby = 4194396 // KEY_STANDBY
    case openurl = 4194397 // KEY_OPENURL
    case launchmail = 4194398 // KEY_LAUNCHMAIL
    case launchmedia = 4194399 // KEY_LAUNCHMEDIA
    case launch0 = 4194400 // KEY_LAUNCH0
    case launch1 = 4194401 // KEY_LAUNCH1
    case launch2 = 4194402 // KEY_LAUNCH2
    case launch3 = 4194403 // KEY_LAUNCH3
    case launch4 = 4194404 // KEY_LAUNCH4
    case launch5 = 4194405 // KEY_LAUNCH5
    case launch6 = 4194406 // KEY_LAUNCH6
    case launch7 = 4194407 // KEY_LAUNCH7
    case launch8 = 4194408 // KEY_LAUNCH8
    case launch9 = 4194409 // KEY_LAUNCH9
    case launcha = 4194410 // KEY_LAUNCHA
    case launchb = 4194411 // KEY_LAUNCHB
    case launchc = 4194412 // KEY_LAUNCHC
    case launchd = 4194413 // KEY_LAUNCHD
    case launche = 4194414 // KEY_LAUNCHE
    case launchf = 4194415 // KEY_LAUNCHF
    case unknown = 8388607 // KEY_UNKNOWN
    case space = 32 // KEY_SPACE
    case exclam = 33 // KEY_EXCLAM
    case quotedbl = 34 // KEY_QUOTEDBL
    case numbersign = 35 // KEY_NUMBERSIGN
    case dollar = 36 // KEY_DOLLAR
    case percent = 37 // KEY_PERCENT
    case ampersand = 38 // KEY_AMPERSAND
    case apostrophe = 39 // KEY_APOSTROPHE
    case parenleft = 40 // KEY_PARENLEFT
    case parenright = 41 // KEY_PARENRIGHT
    case asterisk = 42 // KEY_ASTERISK
    case plus = 43 // KEY_PLUS
    case comma = 44 // KEY_COMMA
    case minus = 45 // KEY_MINUS
    case period = 46 // KEY_PERIOD
    case slash = 47 // KEY_SLASH
    case key0 = 48 // KEY_0
    case key1 = 49 // KEY_1
    case key2 = 50 // KEY_2
    case key3 = 51 // KEY_3
    case key4 = 52 // KEY_4
    case key5 = 53 // KEY_5
    case key6 = 54 // KEY_6
    case key7 = 55 // KEY_7
    case key8 = 56 // KEY_8
    case key9 = 57 // KEY_9
    case colon = 58 // KEY_COLON
    case semicolon = 59 // KEY_SEMICOLON
    case less = 60 // KEY_LESS
    case equal = 61 // KEY_EQUAL
    case greater = 62 // KEY_GREATER
    case question = 63 // KEY_QUESTION
    case at = 64 // KEY_AT
    case a = 65 // KEY_A
    case b = 66 // KEY_B
    case c = 67 // KEY_C
    case d = 68 // KEY_D
    case e = 69 // KEY_E
    case f = 70 // KEY_F
    case g = 71 // KEY_G
    case h = 72 // KEY_H
    case i = 73 // KEY_I
    case j = 74 // KEY_J
    case k = 75 // KEY_K
    case l = 76 // KEY_L
    case m = 77 // KEY_M
    case n = 78 // KEY_N
    case o = 79 // KEY_O
    case p = 80 // KEY_P
    case q = 81 // KEY_Q
    case r = 82 // KEY_R
    case s = 83 // KEY_S
    case t = 84 // KEY_T
    case u = 85 // KEY_U
    case v = 86 // KEY_V
    case w = 87 // KEY_W
    case x = 88 // KEY_X
    case y = 89 // KEY_Y
    case z = 90 // KEY_Z
    case bracketleft = 91 // KEY_BRACKETLEFT
    case backslash = 92 // KEY_BACKSLASH
    case bracketright = 93 // KEY_BRACKETRIGHT
    case asciicircum = 94 // KEY_ASCIICIRCUM
    case underscore = 95 // KEY_UNDERSCORE
    case quoteleft = 96 // KEY_QUOTELEFT
    case braceleft = 123 // KEY_BRACELEFT
    case bar = 124 // KEY_BAR
    case braceright = 125 // KEY_BRACERIGHT
    case asciitilde = 126 // KEY_ASCIITILDE
    case yen = 165 // KEY_YEN
    case section = 167 // KEY_SECTION
    case globe = 4194416 // KEY_GLOBE
    case keyboard = 4194417 // KEY_KEYBOARD
    case jisEisu = 4194418 // KEY_JIS_EISU
    case jisKana = 4194419 // KEY_JIS_KANA
}

public struct KeyModifierMask: OptionSet {
    public let rawValue: Int
    public init (rawValue: Int) {
        self.rawValue = rawValue
    }
    
    public static let keyCodeMask = KeyModifierMask (rawValue: 8388607)
    public static let keyModifierMask = KeyModifierMask (rawValue: 532676608)
    public static let keyMaskCmdOrCtrl = KeyModifierMask (rawValue: 16777216)
    public static let keyMaskShift = KeyModifierMask (rawValue: 33554432)
    public static let keyMaskAlt = KeyModifierMask (rawValue: 67108864)
    public static let keyMaskMeta = KeyModifierMask (rawValue: 134217728)
    public static let keyMaskCtrl = KeyModifierMask (rawValue: 268435456)
    public static let keyMaskKpad = KeyModifierMask (rawValue: 536870912)
    public static let keyMaskGroupSwitch = KeyModifierMask (rawValue: 1073741824)
}

public class Nil  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_NIL, 0)!
    
    public init () {
        
        Nil.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_NIL, 1)!
    
    public init (from: Variant) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Variant true - copy_from argRef:copy_from
        ]
        
        Nil.constructor1 (&handle, &args)
    }
    
}

public class GString  {
    public init (_ str: String) {
        var vh: UnsafeMutableRawPointer?
        gi.string_new_with_utf8_chars (&vh, str)
        handle = OpaquePointer (vh)
    }
    
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING, 0)!
    
    public init () {
        
        GString.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING, 1)!
    
    public init (from: GString) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        GString.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING, 2)!
    
    public init (from: StringName) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        GString.constructor2 (&handle, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING, 3)!
    
    public init (from: NodePath) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        GString.constructor3 (&handle, &args)
    }
    
    func casecmp_to ()-> Int32 {
        abort ()
    }
    
    func nocasecmp_to ()-> Int32 {
        abort ()
    }
    
    func naturalnocasecmp_to ()-> Int32 {
        abort ()
    }
    
    func length ()-> Int32 {
        abort ()
    }
    
    func substr ()-> String {
        abort ()
    }
    
    func get_slice ()-> String {
        abort ()
    }
    
    func get_slicec ()-> String {
        abort ()
    }
    
    func get_slice_count ()-> Int32 {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
    func countn ()-> Int32 {
        abort ()
    }
    
    func findn ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func rfindn ()-> Int32 {
        abort ()
    }
    
    func match ()-> Bool {
        abort ()
    }
    
    func matchn ()-> Bool {
        abort ()
    }
    
    func begins_with ()-> Bool {
        abort ()
    }
    
    func ends_with ()-> Bool {
        abort ()
    }
    
    func is_subsequence_of ()-> Bool {
        abort ()
    }
    
    func is_subsequence_ofn ()-> Bool {
        abort ()
    }
    
    func bigrams ()-> PackedStringArray {
        abort ()
    }
    
    func similarity ()-> Float {
        abort ()
    }
    
    func format ()-> String {
        abort ()
    }
    
    func replace ()-> String {
        abort ()
    }
    
    func replacen ()-> String {
        abort ()
    }
    
    func insert ()-> String {
        abort ()
    }
    
    func capitalize ()-> String {
        abort ()
    }
    
    func to_camel_case ()-> String {
        abort ()
    }
    
    func to_pascal_case ()-> String {
        abort ()
    }
    
    func to_snake_case ()-> String {
        abort ()
    }
    
    func split ()-> PackedStringArray {
        abort ()
    }
    
    func rsplit ()-> PackedStringArray {
        abort ()
    }
    
    func split_floats ()-> PackedFloat64Array {
        abort ()
    }
    
    func join ()-> String {
        abort ()
    }
    
    func to_upper ()-> String {
        abort ()
    }
    
    func to_lower ()-> String {
        abort ()
    }
    
    func left ()-> String {
        abort ()
    }
    
    func right ()-> String {
        abort ()
    }
    
    func strip_edges ()-> String {
        abort ()
    }
    
    func strip_escapes ()-> String {
        abort ()
    }
    
    func lstrip ()-> String {
        abort ()
    }
    
    func rstrip ()-> String {
        abort ()
    }
    
    func get_extension ()-> String {
        abort ()
    }
    
    func get_basename ()-> String {
        abort ()
    }
    
    func path_join ()-> String {
        abort ()
    }
    
    func unicode_at ()-> Int32 {
        abort ()
    }
    
    func indent ()-> String {
        abort ()
    }
    
    func dedent ()-> String {
        abort ()
    }
    
    func hash ()-> Int32 {
        abort ()
    }
    
    func md5_text ()-> String {
        abort ()
    }
    
    func sha1_text ()-> String {
        abort ()
    }
    
    func sha256_text ()-> String {
        abort ()
    }
    
    func md5_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func sha1_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func sha256_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func contains ()-> Bool {
        abort ()
    }
    
    func is_absolute_path ()-> Bool {
        abort ()
    }
    
    func is_relative_path ()-> Bool {
        abort ()
    }
    
    func simplify_path ()-> String {
        abort ()
    }
    
    func get_base_dir ()-> String {
        abort ()
    }
    
    func get_file ()-> String {
        abort ()
    }
    
    func xml_escape ()-> String {
        abort ()
    }
    
    func xml_unescape ()-> String {
        abort ()
    }
    
    func uri_encode ()-> String {
        abort ()
    }
    
    func uri_decode ()-> String {
        abort ()
    }
    
    func c_escape ()-> String {
        abort ()
    }
    
    func c_unescape ()-> String {
        abort ()
    }
    
    func json_escape ()-> String {
        abort ()
    }
    
    func validate_node_name ()-> String {
        abort ()
    }
    
    func validate_filename ()-> String {
        abort ()
    }
    
    func is_valid_identifier ()-> Bool {
        abort ()
    }
    
    func is_valid_int ()-> Bool {
        abort ()
    }
    
    func is_valid_float ()-> Bool {
        abort ()
    }
    
    func is_valid_hex_number ()-> Bool {
        abort ()
    }
    
    func is_valid_html_color ()-> Bool {
        abort ()
    }
    
    func is_valid_ip_address ()-> Bool {
        abort ()
    }
    
    func is_valid_filename ()-> Bool {
        abort ()
    }
    
    func to_int ()-> Int32 {
        abort ()
    }
    
    func to_float ()-> Float {
        abort ()
    }
    
    func hex_to_int ()-> Int32 {
        abort ()
    }
    
    func bin_to_int ()-> Int32 {
        abort ()
    }
    
    func lpad ()-> String {
        abort ()
    }
    
    func rpad ()-> String {
        abort ()
    }
    
    func pad_decimals ()-> String {
        abort ()
    }
    
    func pad_zeros ()-> String {
        abort ()
    }
    
    func trim_prefix ()-> String {
        abort ()
    }
    
    func trim_suffix ()-> String {
        abort ()
    }
    
    func to_ascii_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func to_utf8_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func to_utf16_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func to_utf32_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func num_scientific ()-> String {
        abort ()
    }
    
    func num ()-> String {
        abort ()
    }
    
    func num_int64 ()-> String {
        abort ()
    }
    
    func num_uint64 ()-> String {
        abort ()
    }
    
    func chr ()-> String {
        abort ()
    }
    
    func humanize_size ()-> String {
        abort ()
    }
    
}

public struct Vector2  {
    var x: Float
    var y: Float
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR2, 0)!
    
    public init () {
        
        Vector2.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR2, 1)!
    
    public init (from: Vector2) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector2 true - copy_from argRef:copy_from
        ]
        
        Vector2.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR2, 2)!
    
    public init (from: Vector2i) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector2i true - copy_from argRef:copy_from
        ]
        
        Vector2.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR2, 3)!
    
    public init (x: Float, y: Float) {
        var copy_x = x
        var copy_y = y
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x), // isCoreType: float false - copy_x argRef:copy_x
            UnsafeRawPointer(&copy_y), // isCoreType: float false - copy_y argRef:copy_y
        ]
        
        Vector2.constructor3 (&self, &args)
    }
    
    func angle ()-> Float {
        abort ()
    }
    
    func angle_to ()-> Float {
        abort ()
    }
    
    func angle_to_point ()-> Float {
        abort ()
    }
    
    func direction_to ()-> Vector2 {
        abort ()
    }
    
    func distance_to ()-> Float {
        abort ()
    }
    
    func distance_squared_to ()-> Float {
        abort ()
    }
    
    func length ()-> Float {
        abort ()
    }
    
    func length_squared ()-> Float {
        abort ()
    }
    
    func limit_length ()-> Vector2 {
        abort ()
    }
    
    func normalized ()-> Vector2 {
        abort ()
    }
    
    func is_normalized ()-> Bool {
        abort ()
    }
    
    func is_equal_approx ()-> Bool {
        abort ()
    }
    
    func is_zero_approx ()-> Bool {
        abort ()
    }
    
    func is_finite ()-> Bool {
        abort ()
    }
    
    func posmod ()-> Vector2 {
        abort ()
    }
    
    func posmodv ()-> Vector2 {
        abort ()
    }
    
    func project ()-> Vector2 {
        abort ()
    }
    
    func lerp ()-> Vector2 {
        abort ()
    }
    
    func slerp ()-> Vector2 {
        abort ()
    }
    
    func cubic_interpolate ()-> Vector2 {
        abort ()
    }
    
    func cubic_interpolate_in_time ()-> Vector2 {
        abort ()
    }
    
    func bezier_interpolate ()-> Vector2 {
        abort ()
    }
    
    func bezier_derivative ()-> Vector2 {
        abort ()
    }
    
    func max_axis_index ()-> Int32 {
        abort ()
    }
    
    func min_axis_index ()-> Int32 {
        abort ()
    }
    
    func move_toward ()-> Vector2 {
        abort ()
    }
    
    func rotated ()-> Vector2 {
        abort ()
    }
    
    func orthogonal ()-> Vector2 {
        abort ()
    }
    
    func floor ()-> Vector2 {
        abort ()
    }
    
    func ceil ()-> Vector2 {
        abort ()
    }
    
    func round ()-> Vector2 {
        abort ()
    }
    
    func aspect ()-> Float {
        abort ()
    }
    
    func dot ()-> Float {
        abort ()
    }
    
    func slide ()-> Vector2 {
        abort ()
    }
    
    func bounce ()-> Vector2 {
        abort ()
    }
    
    func reflect ()-> Vector2 {
        abort ()
    }
    
    func cross ()-> Float {
        abort ()
    }
    
    func abs ()-> Vector2 {
        abort ()
    }
    
    func sign ()-> Vector2 {
        abort ()
    }
    
    func clamp ()-> Vector2 {
        abort ()
    }
    
    func snapped ()-> Vector2 {
        abort ()
    }
    
    func from_angle ()-> Vector2 {
        abort ()
    }
    
}

public struct Vector2i  {
    var x: Int32
    var y: Int32
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR2I, 0)!
    
    public init () {
        
        Vector2i.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR2I, 1)!
    
    public init (from: Vector2i) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector2i true - copy_from argRef:copy_from
        ]
        
        Vector2i.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR2I, 2)!
    
    public init (from: Vector2) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector2 true - copy_from argRef:copy_from
        ]
        
        Vector2i.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR2I, 3)!
    
    public init (x: Int, y: Int) {
        var copy_x = x
        var copy_y = y
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x), // isCoreType: int false - copy_x argRef:copy_x
            UnsafeRawPointer(&copy_y), // isCoreType: int false - copy_y argRef:copy_y
        ]
        
        Vector2i.constructor3 (&self, &args)
    }
    
    func aspect ()-> Float {
        abort ()
    }
    
    func max_axis_index ()-> Int32 {
        abort ()
    }
    
    func min_axis_index ()-> Int32 {
        abort ()
    }
    
    func length ()-> Float {
        abort ()
    }
    
    func length_squared ()-> Int32 {
        abort ()
    }
    
    func sign ()-> Vector2i {
        abort ()
    }
    
    func abs ()-> Vector2i {
        abort ()
    }
    
    func clamp ()-> Vector2i {
        abort ()
    }
    
    func snapped ()-> Vector2i {
        abort ()
    }
    
}

public struct Rect2  {
    var position: Vector2
    var size: Vector2
    var end: Vector2
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2, 0)!
    
    public init () {
        
        Rect2.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2, 1)!
    
    public init (from: Rect2) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Rect2 true - copy_from argRef:copy_from
        ]
        
        Rect2.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2, 2)!
    
    public init (from: Rect2i) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Rect2i true - copy_from argRef:copy_from
        ]
        
        Rect2.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2, 3)!
    
    public init (position: Vector2, size: Vector2) {
        var copy_position = position
        var copy_size = size
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_position), // isCoreType: Vector2 true - copy_position argRef:copy_position
            UnsafeRawPointer(&copy_size), // isCoreType: Vector2 true - copy_size argRef:copy_size
        ]
        
        Rect2.constructor3 (&self, &args)
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2, 4)!
    
    public init (x: Float, y: Float, width: Float, height: Float) {
        var copy_x = x
        var copy_y = y
        var copy_width = width
        var copy_height = height
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x), // isCoreType: float false - copy_x argRef:copy_x
            UnsafeRawPointer(&copy_y), // isCoreType: float false - copy_y argRef:copy_y
            UnsafeRawPointer(&copy_width), // isCoreType: float false - copy_width argRef:copy_width
            UnsafeRawPointer(&copy_height), // isCoreType: float false - copy_height argRef:copy_height
        ]
        
        Rect2.constructor4 (&self, &args)
    }
    
    func get_center ()-> Vector2 {
        abort ()
    }
    
    func get_area ()-> Float {
        abort ()
    }
    
    func has_area ()-> Bool {
        abort ()
    }
    
    func has_point ()-> Bool {
        abort ()
    }
    
    func is_equal_approx ()-> Bool {
        abort ()
    }
    
    func is_finite ()-> Bool {
        abort ()
    }
    
    func intersects ()-> Bool {
        abort ()
    }
    
    func encloses ()-> Bool {
        abort ()
    }
    
    func intersection ()-> Rect2 {
        abort ()
    }
    
    func merge ()-> Rect2 {
        abort ()
    }
    
    func expand ()-> Rect2 {
        abort ()
    }
    
    func grow ()-> Rect2 {
        abort ()
    }
    
    func grow_side ()-> Rect2 {
        abort ()
    }
    
    func grow_individual ()-> Rect2 {
        abort ()
    }
    
    func abs ()-> Rect2 {
        abort ()
    }
    
}

public struct Rect2i  {
    var position: Vector2i
    var size: Vector2i
    var end: Vector2i
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2I, 0)!
    
    public init () {
        
        Rect2i.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2I, 1)!
    
    public init (from: Rect2i) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Rect2i true - copy_from argRef:copy_from
        ]
        
        Rect2i.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2I, 2)!
    
    public init (from: Rect2) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Rect2 true - copy_from argRef:copy_from
        ]
        
        Rect2i.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2I, 3)!
    
    public init (position: Vector2i, size: Vector2i) {
        var copy_position = position
        var copy_size = size
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_position), // isCoreType: Vector2i true - copy_position argRef:copy_position
            UnsafeRawPointer(&copy_size), // isCoreType: Vector2i true - copy_size argRef:copy_size
        ]
        
        Rect2i.constructor3 (&self, &args)
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2I, 4)!
    
    public init (x: Int, y: Int, width: Int, height: Int) {
        var copy_x = x
        var copy_y = y
        var copy_width = width
        var copy_height = height
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x), // isCoreType: int false - copy_x argRef:copy_x
            UnsafeRawPointer(&copy_y), // isCoreType: int false - copy_y argRef:copy_y
            UnsafeRawPointer(&copy_width), // isCoreType: int false - copy_width argRef:copy_width
            UnsafeRawPointer(&copy_height), // isCoreType: int false - copy_height argRef:copy_height
        ]
        
        Rect2i.constructor4 (&self, &args)
    }
    
    func get_center ()-> Vector2i {
        abort ()
    }
    
    func get_area ()-> Int32 {
        abort ()
    }
    
    func has_area ()-> Bool {
        abort ()
    }
    
    func has_point ()-> Bool {
        abort ()
    }
    
    func intersects ()-> Bool {
        abort ()
    }
    
    func encloses ()-> Bool {
        abort ()
    }
    
    func intersection ()-> Rect2i {
        abort ()
    }
    
    func merge ()-> Rect2i {
        abort ()
    }
    
    func expand ()-> Rect2i {
        abort ()
    }
    
    func grow ()-> Rect2i {
        abort ()
    }
    
    func grow_side ()-> Rect2i {
        abort ()
    }
    
    func grow_individual ()-> Rect2i {
        abort ()
    }
    
    func abs ()-> Rect2i {
        abort ()
    }
    
}

public struct Vector3  {
    var x: Float
    var y: Float
    var z: Float
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR3, 0)!
    
    public init () {
        
        Vector3.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR3, 1)!
    
    public init (from: Vector3) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector3 true - copy_from argRef:copy_from
        ]
        
        Vector3.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR3, 2)!
    
    public init (from: Vector3i) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector3i true - copy_from argRef:copy_from
        ]
        
        Vector3.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR3, 3)!
    
    public init (x: Float, y: Float, z: Float) {
        var copy_x = x
        var copy_y = y
        var copy_z = z
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x), // isCoreType: float false - copy_x argRef:copy_x
            UnsafeRawPointer(&copy_y), // isCoreType: float false - copy_y argRef:copy_y
            UnsafeRawPointer(&copy_z), // isCoreType: float false - copy_z argRef:copy_z
        ]
        
        Vector3.constructor3 (&self, &args)
    }
    
    func min_axis_index ()-> Int32 {
        abort ()
    }
    
    func max_axis_index ()-> Int32 {
        abort ()
    }
    
    func angle_to ()-> Float {
        abort ()
    }
    
    func signed_angle_to ()-> Float {
        abort ()
    }
    
    func direction_to ()-> Vector3 {
        abort ()
    }
    
    func distance_to ()-> Float {
        abort ()
    }
    
    func distance_squared_to ()-> Float {
        abort ()
    }
    
    func length ()-> Float {
        abort ()
    }
    
    func length_squared ()-> Float {
        abort ()
    }
    
    func limit_length ()-> Vector3 {
        abort ()
    }
    
    func normalized ()-> Vector3 {
        abort ()
    }
    
    func is_normalized ()-> Bool {
        abort ()
    }
    
    func is_equal_approx ()-> Bool {
        abort ()
    }
    
    func is_zero_approx ()-> Bool {
        abort ()
    }
    
    func is_finite ()-> Bool {
        abort ()
    }
    
    func inverse ()-> Vector3 {
        abort ()
    }
    
    func clamp ()-> Vector3 {
        abort ()
    }
    
    func snapped ()-> Vector3 {
        abort ()
    }
    
    func rotated ()-> Vector3 {
        abort ()
    }
    
    func lerp ()-> Vector3 {
        abort ()
    }
    
    func slerp ()-> Vector3 {
        abort ()
    }
    
    func cubic_interpolate ()-> Vector3 {
        abort ()
    }
    
    func cubic_interpolate_in_time ()-> Vector3 {
        abort ()
    }
    
    func bezier_interpolate ()-> Vector3 {
        abort ()
    }
    
    func bezier_derivative ()-> Vector3 {
        abort ()
    }
    
    func move_toward ()-> Vector3 {
        abort ()
    }
    
    func dot ()-> Float {
        abort ()
    }
    
    func cross ()-> Vector3 {
        abort ()
    }
    
    func outer ()-> Basis {
        abort ()
    }
    
    func abs ()-> Vector3 {
        abort ()
    }
    
    func floor ()-> Vector3 {
        abort ()
    }
    
    func ceil ()-> Vector3 {
        abort ()
    }
    
    func round ()-> Vector3 {
        abort ()
    }
    
    func posmod ()-> Vector3 {
        abort ()
    }
    
    func posmodv ()-> Vector3 {
        abort ()
    }
    
    func project ()-> Vector3 {
        abort ()
    }
    
    func slide ()-> Vector3 {
        abort ()
    }
    
    func bounce ()-> Vector3 {
        abort ()
    }
    
    func reflect ()-> Vector3 {
        abort ()
    }
    
    func sign ()-> Vector3 {
        abort ()
    }
    
    func octahedron_encode ()-> Vector2 {
        abort ()
    }
    
    func octahedron_decode ()-> Vector3 {
        abort ()
    }
    
}

public struct Vector3i  {
    var x: Int32
    var y: Int32
    var z: Int32
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR3I, 0)!
    
    public init () {
        
        Vector3i.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR3I, 1)!
    
    public init (from: Vector3i) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector3i true - copy_from argRef:copy_from
        ]
        
        Vector3i.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR3I, 2)!
    
    public init (from: Vector3) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector3 true - copy_from argRef:copy_from
        ]
        
        Vector3i.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR3I, 3)!
    
    public init (x: Int, y: Int, z: Int) {
        var copy_x = x
        var copy_y = y
        var copy_z = z
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x), // isCoreType: int false - copy_x argRef:copy_x
            UnsafeRawPointer(&copy_y), // isCoreType: int false - copy_y argRef:copy_y
            UnsafeRawPointer(&copy_z), // isCoreType: int false - copy_z argRef:copy_z
        ]
        
        Vector3i.constructor3 (&self, &args)
    }
    
    func min_axis_index ()-> Int32 {
        abort ()
    }
    
    func max_axis_index ()-> Int32 {
        abort ()
    }
    
    func length ()-> Float {
        abort ()
    }
    
    func length_squared ()-> Int32 {
        abort ()
    }
    
    func sign ()-> Vector3i {
        abort ()
    }
    
    func abs ()-> Vector3i {
        abort ()
    }
    
    func clamp ()-> Vector3i {
        abort ()
    }
    
    func snapped ()-> Vector3i {
        abort ()
    }
    
}

public struct Transform2D  {
    var x: Vector2
    var y: Vector2
    var origin: Vector2
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, 0)!
    
    public init () {
        
        Transform2D.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, 1)!
    
    public init (from: Transform2D) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Transform2D true - copy_from argRef:copy_from
        ]
        
        Transform2D.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, 2)!
    
    public init (rotation: Float, position: Vector2) {
        var copy_rotation = rotation
        var copy_position = position
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_rotation), // isCoreType: float false - copy_rotation argRef:copy_rotation
            UnsafeRawPointer(&copy_position), // isCoreType: Vector2 true - copy_position argRef:copy_position
        ]
        
        Transform2D.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, 3)!
    
    public init (rotation: Float, scale: Vector2, skew: Float, position: Vector2) {
        var copy_rotation = rotation
        var copy_scale = scale
        var copy_skew = skew
        var copy_position = position
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_rotation), // isCoreType: float false - copy_rotation argRef:copy_rotation
            UnsafeRawPointer(&copy_scale), // isCoreType: Vector2 true - copy_scale argRef:copy_scale
            UnsafeRawPointer(&copy_skew), // isCoreType: float false - copy_skew argRef:copy_skew
            UnsafeRawPointer(&copy_position), // isCoreType: Vector2 true - copy_position argRef:copy_position
        ]
        
        Transform2D.constructor3 (&self, &args)
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, 4)!
    
    public init (xAxis: Vector2, yAxis: Vector2, origin: Vector2) {
        var copy_x_axis = xAxis
        var copy_y_axis = yAxis
        var copy_origin = origin
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x_axis), // isCoreType: Vector2 true - copy_x_axis argRef:copy_x_axis
            UnsafeRawPointer(&copy_y_axis), // isCoreType: Vector2 true - copy_y_axis argRef:copy_y_axis
            UnsafeRawPointer(&copy_origin), // isCoreType: Vector2 true - copy_origin argRef:copy_origin
        ]
        
        Transform2D.constructor4 (&self, &args)
    }
    
    func inverse ()-> Transform2D {
        abort ()
    }
    
    func affine_inverse ()-> Transform2D {
        abort ()
    }
    
    func get_rotation ()-> Float {
        abort ()
    }
    
    func get_origin ()-> Vector2 {
        abort ()
    }
    
    func get_scale ()-> Vector2 {
        abort ()
    }
    
    func get_skew ()-> Float {
        abort ()
    }
    
    func orthonormalized ()-> Transform2D {
        abort ()
    }
    
    func rotated ()-> Transform2D {
        abort ()
    }
    
    func rotated_local ()-> Transform2D {
        abort ()
    }
    
    func scaled ()-> Transform2D {
        abort ()
    }
    
    func scaled_local ()-> Transform2D {
        abort ()
    }
    
    func translated ()-> Transform2D {
        abort ()
    }
    
    func translated_local ()-> Transform2D {
        abort ()
    }
    
    func basis_xform ()-> Vector2 {
        abort ()
    }
    
    func basis_xform_inv ()-> Vector2 {
        abort ()
    }
    
    func interpolate_with ()-> Transform2D {
        abort ()
    }
    
    func is_equal_approx ()-> Bool {
        abort ()
    }
    
    func is_finite ()-> Bool {
        abort ()
    }
    
    func looking_at ()-> Transform2D {
        abort ()
    }
    
}

public struct Vector4  {
    var x: Float
    var y: Float
    var z: Float
    var w: Float
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4, 0)!
    
    public init () {
        
        Vector4.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4, 1)!
    
    public init (from: Vector4) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector4 false - copy_from argRef:copy_from
        ]
        
        Vector4.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4, 2)!
    
    public init (from: Vector4i) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector4i false - copy_from argRef:copy_from
        ]
        
        Vector4.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4, 3)!
    
    public init (x: Float, y: Float, z: Float, w: Float) {
        var copy_x = x
        var copy_y = y
        var copy_z = z
        var copy_w = w
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x), // isCoreType: float false - copy_x argRef:copy_x
            UnsafeRawPointer(&copy_y), // isCoreType: float false - copy_y argRef:copy_y
            UnsafeRawPointer(&copy_z), // isCoreType: float false - copy_z argRef:copy_z
            UnsafeRawPointer(&copy_w), // isCoreType: float false - copy_w argRef:copy_w
        ]
        
        Vector4.constructor3 (&self, &args)
    }
    
    func min_axis_index ()-> Int32 {
        abort ()
    }
    
    func max_axis_index ()-> Int32 {
        abort ()
    }
    
    func length ()-> Float {
        abort ()
    }
    
    func length_squared ()-> Float {
        abort ()
    }
    
    func abs ()-> Vector4 {
        abort ()
    }
    
    func sign ()-> Vector4 {
        abort ()
    }
    
    func floor ()-> Vector4 {
        abort ()
    }
    
    func ceil ()-> Vector4 {
        abort ()
    }
    
    func round ()-> Vector4 {
        abort ()
    }
    
    func lerp ()-> Vector4 {
        abort ()
    }
    
    func cubic_interpolate ()-> Vector4 {
        abort ()
    }
    
    func cubic_interpolate_in_time ()-> Vector4 {
        abort ()
    }
    
    func posmod ()-> Vector4 {
        abort ()
    }
    
    func posmodv ()-> Vector4 {
        abort ()
    }
    
    func snapped ()-> Vector4 {
        abort ()
    }
    
    func clamp ()-> Vector4 {
        abort ()
    }
    
    func normalized ()-> Vector4 {
        abort ()
    }
    
    func is_normalized ()-> Bool {
        abort ()
    }
    
    func direction_to ()-> Vector4 {
        abort ()
    }
    
    func distance_to ()-> Float {
        abort ()
    }
    
    func distance_squared_to ()-> Float {
        abort ()
    }
    
    func dot ()-> Float {
        abort ()
    }
    
    func inverse ()-> Vector4 {
        abort ()
    }
    
    func is_equal_approx ()-> Bool {
        abort ()
    }
    
    func is_zero_approx ()-> Bool {
        abort ()
    }
    
    func is_finite ()-> Bool {
        abort ()
    }
    
}

public struct Vector4i  {
    var x: Int32
    var y: Int32
    var z: Int32
    var w: Int32
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4I, 0)!
    
    public init () {
        
        Vector4i.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4I, 1)!
    
    public init (from: Vector4i) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector4i false - copy_from argRef:copy_from
        ]
        
        Vector4i.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4I, 2)!
    
    public init (from: Vector4) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Vector4 false - copy_from argRef:copy_from
        ]
        
        Vector4i.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4I, 3)!
    
    public init (x: Int, y: Int, z: Int, w: Int) {
        var copy_x = x
        var copy_y = y
        var copy_z = z
        var copy_w = w
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x), // isCoreType: int false - copy_x argRef:copy_x
            UnsafeRawPointer(&copy_y), // isCoreType: int false - copy_y argRef:copy_y
            UnsafeRawPointer(&copy_z), // isCoreType: int false - copy_z argRef:copy_z
            UnsafeRawPointer(&copy_w), // isCoreType: int false - copy_w argRef:copy_w
        ]
        
        Vector4i.constructor3 (&self, &args)
    }
    
    func min_axis_index ()-> Int32 {
        abort ()
    }
    
    func max_axis_index ()-> Int32 {
        abort ()
    }
    
    func length ()-> Float {
        abort ()
    }
    
    func length_squared ()-> Int32 {
        abort ()
    }
    
    func sign ()-> Vector4i {
        abort ()
    }
    
    func abs ()-> Vector4i {
        abort ()
    }
    
    func clamp ()-> Vector4i {
        abort ()
    }
    
    func snapped ()-> Vector4i {
        abort ()
    }
    
}

public struct Plane  {
    var x: Float
    var y: Float
    var z: Float
    var d: Float
    var normal: Vector3
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PLANE, 0)!
    
    public init () {
        
        Plane.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PLANE, 1)!
    
    public init (from: Plane) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Plane true - copy_from argRef:copy_from
        ]
        
        Plane.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PLANE, 2)!
    
    public init (normal: Vector3) {
        var copy_normal = normal
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_normal), // isCoreType: Vector3 true - copy_normal argRef:copy_normal
        ]
        
        Plane.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PLANE, 3)!
    
    public init (normal: Vector3, d: Float) {
        var copy_normal = normal
        var copy_d = d
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_normal), // isCoreType: Vector3 true - copy_normal argRef:copy_normal
            UnsafeRawPointer(&copy_d), // isCoreType: float false - copy_d argRef:copy_d
        ]
        
        Plane.constructor3 (&self, &args)
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PLANE, 4)!
    
    public init (normal: Vector3, point: Vector3) {
        var copy_normal = normal
        var copy_point = point
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_normal), // isCoreType: Vector3 true - copy_normal argRef:copy_normal
            UnsafeRawPointer(&copy_point), // isCoreType: Vector3 true - copy_point argRef:copy_point
        ]
        
        Plane.constructor4 (&self, &args)
    }
    
    static var constructor5: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PLANE, 5)!
    
    public init (point1: Vector3, point2: Vector3, point3: Vector3) {
        var copy_point1 = point1
        var copy_point2 = point2
        var copy_point3 = point3
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_point1), // isCoreType: Vector3 true - copy_point1 argRef:copy_point1
            UnsafeRawPointer(&copy_point2), // isCoreType: Vector3 true - copy_point2 argRef:copy_point2
            UnsafeRawPointer(&copy_point3), // isCoreType: Vector3 true - copy_point3 argRef:copy_point3
        ]
        
        Plane.constructor5 (&self, &args)
    }
    
    static var constructor6: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PLANE, 6)!
    
    public init (a: Float, b: Float, c: Float, d: Float) {
        var copy_a = a
        var copy_b = b
        var copy_c = c
        var copy_d = d
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_a), // isCoreType: float false - copy_a argRef:copy_a
            UnsafeRawPointer(&copy_b), // isCoreType: float false - copy_b argRef:copy_b
            UnsafeRawPointer(&copy_c), // isCoreType: float false - copy_c argRef:copy_c
            UnsafeRawPointer(&copy_d), // isCoreType: float false - copy_d argRef:copy_d
        ]
        
        Plane.constructor6 (&self, &args)
    }
    
    func normalized ()-> Plane {
        abort ()
    }
    
    func get_center ()-> Vector3 {
        abort ()
    }
    
    func is_equal_approx ()-> Bool {
        abort ()
    }
    
    func is_finite ()-> Bool {
        abort ()
    }
    
    func is_point_over ()-> Bool {
        abort ()
    }
    
    func distance_to ()-> Float {
        abort ()
    }
    
    func has_point ()-> Bool {
        abort ()
    }
    
    func project ()-> Vector3 {
        abort ()
    }
    
    func intersect_3 ()-> Variant {
        abort ()
    }
    
    func intersects_ray ()-> Variant {
        abort ()
    }
    
    func intersects_segment ()-> Variant {
        abort ()
    }
    
}

public struct Quaternion  {
    var x: Float
    var y: Float
    var z: Float
    var w: Float
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_QUATERNION, 0)!
    
    public init () {
        
        Quaternion.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_QUATERNION, 1)!
    
    public init (from: Quaternion) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Quaternion false - copy_from argRef:copy_from
        ]
        
        Quaternion.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_QUATERNION, 2)!
    
    public init (from: Basis) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Basis true - copy_from argRef:copy_from
        ]
        
        Quaternion.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_QUATERNION, 3)!
    
    public init (axis: Vector3, angle: Float) {
        var copy_axis = axis
        var copy_angle = angle
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_axis), // isCoreType: Vector3 true - copy_axis argRef:copy_axis
            UnsafeRawPointer(&copy_angle), // isCoreType: float false - copy_angle argRef:copy_angle
        ]
        
        Quaternion.constructor3 (&self, &args)
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_QUATERNION, 4)!
    
    public init (arcFrom: Vector3, arcTo: Vector3) {
        var copy_arc_from = arcFrom
        var copy_arc_to = arcTo
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_arc_from), // isCoreType: Vector3 true - copy_arc_from argRef:copy_arc_from
            UnsafeRawPointer(&copy_arc_to), // isCoreType: Vector3 true - copy_arc_to argRef:copy_arc_to
        ]
        
        Quaternion.constructor4 (&self, &args)
    }
    
    static var constructor5: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_QUATERNION, 5)!
    
    public init (x: Float, y: Float, z: Float, w: Float) {
        var copy_x = x
        var copy_y = y
        var copy_z = z
        var copy_w = w
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x), // isCoreType: float false - copy_x argRef:copy_x
            UnsafeRawPointer(&copy_y), // isCoreType: float false - copy_y argRef:copy_y
            UnsafeRawPointer(&copy_z), // isCoreType: float false - copy_z argRef:copy_z
            UnsafeRawPointer(&copy_w), // isCoreType: float false - copy_w argRef:copy_w
        ]
        
        Quaternion.constructor5 (&self, &args)
    }
    
    func length ()-> Float {
        abort ()
    }
    
    func length_squared ()-> Float {
        abort ()
    }
    
    func normalized ()-> Quaternion {
        abort ()
    }
    
    func is_normalized ()-> Bool {
        abort ()
    }
    
    func is_equal_approx ()-> Bool {
        abort ()
    }
    
    func is_finite ()-> Bool {
        abort ()
    }
    
    func inverse ()-> Quaternion {
        abort ()
    }
    
    func log ()-> Quaternion {
        abort ()
    }
    
    func exp ()-> Quaternion {
        abort ()
    }
    
    func angle_to ()-> Float {
        abort ()
    }
    
    func dot ()-> Float {
        abort ()
    }
    
    func slerp ()-> Quaternion {
        abort ()
    }
    
    func slerpni ()-> Quaternion {
        abort ()
    }
    
    func spherical_cubic_interpolate ()-> Quaternion {
        abort ()
    }
    
    func spherical_cubic_interpolate_in_time ()-> Quaternion {
        abort ()
    }
    
    func get_euler ()-> Vector3 {
        abort ()
    }
    
    func from_euler ()-> Quaternion {
        abort ()
    }
    
    func get_axis ()-> Vector3 {
        abort ()
    }
    
    func get_angle ()-> Float {
        abort ()
    }
    
}

public struct AABB  {
    var position: Vector3
    var size: Vector3
    var end: Vector3
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_AABB, 0)!
    
    public init () {
        
        AABB.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_AABB, 1)!
    
    public init (from: AABB) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: AABB true - copy_from argRef:copy_from
        ]
        
        AABB.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_AABB, 2)!
    
    public init (position: Vector3, size: Vector3) {
        var copy_position = position
        var copy_size = size
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_position), // isCoreType: Vector3 true - copy_position argRef:copy_position
            UnsafeRawPointer(&copy_size), // isCoreType: Vector3 true - copy_size argRef:copy_size
        ]
        
        AABB.constructor2 (&self, &args)
    }
    
    func abs ()-> AABB {
        abort ()
    }
    
    func get_center ()-> Vector3 {
        abort ()
    }
    
    func get_volume ()-> Float {
        abort ()
    }
    
    func has_volume ()-> Bool {
        abort ()
    }
    
    func has_surface ()-> Bool {
        abort ()
    }
    
    func has_point ()-> Bool {
        abort ()
    }
    
    func is_equal_approx ()-> Bool {
        abort ()
    }
    
    func is_finite ()-> Bool {
        abort ()
    }
    
    func intersects ()-> Bool {
        abort ()
    }
    
    func encloses ()-> Bool {
        abort ()
    }
    
    func intersects_plane ()-> Bool {
        abort ()
    }
    
    func intersection ()-> AABB {
        abort ()
    }
    
    func merge ()-> AABB {
        abort ()
    }
    
    func expand ()-> AABB {
        abort ()
    }
    
    func grow ()-> AABB {
        abort ()
    }
    
    func get_support ()-> Vector3 {
        abort ()
    }
    
    func get_longest_axis ()-> Vector3 {
        abort ()
    }
    
    func get_longest_axis_index ()-> Int32 {
        abort ()
    }
    
    func get_longest_axis_size ()-> Float {
        abort ()
    }
    
    func get_shortest_axis ()-> Vector3 {
        abort ()
    }
    
    func get_shortest_axis_index ()-> Int32 {
        abort ()
    }
    
    func get_shortest_axis_size ()-> Float {
        abort ()
    }
    
    func get_endpoint ()-> Vector3 {
        abort ()
    }
    
    func intersects_segment ()-> Variant {
        abort ()
    }
    
    func intersects_ray ()-> Variant {
        abort ()
    }
    
}

public struct Basis  {
    var x: Vector3
    var y: Vector3
    var z: Vector3
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_BASIS, 0)!
    
    public init () {
        
        Basis.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_BASIS, 1)!
    
    public init (from: Basis) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Basis true - copy_from argRef:copy_from
        ]
        
        Basis.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_BASIS, 2)!
    
    public init (from: Quaternion) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Quaternion false - copy_from argRef:copy_from
        ]
        
        Basis.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_BASIS, 3)!
    
    public init (axis: Vector3, angle: Float) {
        var copy_axis = axis
        var copy_angle = angle
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_axis), // isCoreType: Vector3 true - copy_axis argRef:copy_axis
            UnsafeRawPointer(&copy_angle), // isCoreType: float false - copy_angle argRef:copy_angle
        ]
        
        Basis.constructor3 (&self, &args)
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_BASIS, 4)!
    
    public init (xAxis: Vector3, yAxis: Vector3, zAxis: Vector3) {
        var copy_x_axis = xAxis
        var copy_y_axis = yAxis
        var copy_z_axis = zAxis
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x_axis), // isCoreType: Vector3 true - copy_x_axis argRef:copy_x_axis
            UnsafeRawPointer(&copy_y_axis), // isCoreType: Vector3 true - copy_y_axis argRef:copy_y_axis
            UnsafeRawPointer(&copy_z_axis), // isCoreType: Vector3 true - copy_z_axis argRef:copy_z_axis
        ]
        
        Basis.constructor4 (&self, &args)
    }
    
    func inverse ()-> Basis {
        abort ()
    }
    
    func transposed ()-> Basis {
        abort ()
    }
    
    func orthonormalized ()-> Basis {
        abort ()
    }
    
    func determinant ()-> Float {
        abort ()
    }
    
    func rotated ()-> Basis {
        abort ()
    }
    
    func scaled ()-> Basis {
        abort ()
    }
    
    func get_scale ()-> Vector3 {
        abort ()
    }
    
    func get_euler ()-> Vector3 {
        abort ()
    }
    
    func tdotx ()-> Float {
        abort ()
    }
    
    func tdoty ()-> Float {
        abort ()
    }
    
    func tdotz ()-> Float {
        abort ()
    }
    
    func slerp ()-> Basis {
        abort ()
    }
    
    func is_equal_approx ()-> Bool {
        abort ()
    }
    
    func is_finite ()-> Bool {
        abort ()
    }
    
    func get_rotation_quaternion ()-> Quaternion {
        abort ()
    }
    
    func looking_at ()-> Basis {
        abort ()
    }
    
    func from_scale ()-> Basis {
        abort ()
    }
    
    func from_euler ()-> Basis {
        abort ()
    }
    
}

public struct Transform3D  {
    var basis: Basis
    var origin: Vector3
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 0)!
    
    public init () {
        
        Transform3D.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 1)!
    
    public init (from: Transform3D) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Transform3D false - copy_from argRef:copy_from
        ]
        
        Transform3D.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 2)!
    
    public init (basis: Basis, origin: Vector3) {
        var copy_basis = basis
        var copy_origin = origin
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_basis), // isCoreType: Basis true - copy_basis argRef:copy_basis
            UnsafeRawPointer(&copy_origin), // isCoreType: Vector3 true - copy_origin argRef:copy_origin
        ]
        
        Transform3D.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 3)!
    
    public init (xAxis: Vector3, yAxis: Vector3, zAxis: Vector3, origin: Vector3) {
        var copy_x_axis = xAxis
        var copy_y_axis = yAxis
        var copy_z_axis = zAxis
        var copy_origin = origin
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x_axis), // isCoreType: Vector3 true - copy_x_axis argRef:copy_x_axis
            UnsafeRawPointer(&copy_y_axis), // isCoreType: Vector3 true - copy_y_axis argRef:copy_y_axis
            UnsafeRawPointer(&copy_z_axis), // isCoreType: Vector3 true - copy_z_axis argRef:copy_z_axis
            UnsafeRawPointer(&copy_origin), // isCoreType: Vector3 true - copy_origin argRef:copy_origin
        ]
        
        Transform3D.constructor3 (&self, &args)
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 4)!
    
    public init (from: Projection) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Projection false - copy_from argRef:copy_from
        ]
        
        Transform3D.constructor4 (&self, &args)
    }
    
    func inverse ()-> Transform3D {
        abort ()
    }
    
    func affine_inverse ()-> Transform3D {
        abort ()
    }
    
    func orthonormalized ()-> Transform3D {
        abort ()
    }
    
    func rotated ()-> Transform3D {
        abort ()
    }
    
    func rotated_local ()-> Transform3D {
        abort ()
    }
    
    func scaled ()-> Transform3D {
        abort ()
    }
    
    func scaled_local ()-> Transform3D {
        abort ()
    }
    
    func translated ()-> Transform3D {
        abort ()
    }
    
    func translated_local ()-> Transform3D {
        abort ()
    }
    
    func looking_at ()-> Transform3D {
        abort ()
    }
    
    func interpolate_with ()-> Transform3D {
        abort ()
    }
    
    func is_equal_approx ()-> Bool {
        abort ()
    }
    
    func is_finite ()-> Bool {
        abort ()
    }
    
}

public struct Projection  {
    var x: Vector4
    var y: Vector4
    var z: Vector4
    var w: Vector4
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PROJECTION, 0)!
    
    public init () {
        
        Projection.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PROJECTION, 1)!
    
    public init (from: Projection) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Projection false - copy_from argRef:copy_from
        ]
        
        Projection.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PROJECTION, 2)!
    
    public init (from: Transform3D) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Transform3D false - copy_from argRef:copy_from
        ]
        
        Projection.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PROJECTION, 3)!
    
    public init (xAxis: Vector4, yAxis: Vector4, zAxis: Vector4, wAxis: Vector4) {
        var copy_x_axis = xAxis
        var copy_y_axis = yAxis
        var copy_z_axis = zAxis
        var copy_w_axis = wAxis
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_x_axis), // isCoreType: Vector4 false - copy_x_axis argRef:copy_x_axis
            UnsafeRawPointer(&copy_y_axis), // isCoreType: Vector4 false - copy_y_axis argRef:copy_y_axis
            UnsafeRawPointer(&copy_z_axis), // isCoreType: Vector4 false - copy_z_axis argRef:copy_z_axis
            UnsafeRawPointer(&copy_w_axis), // isCoreType: Vector4 false - copy_w_axis argRef:copy_w_axis
        ]
        
        Projection.constructor3 (&self, &args)
    }
    
    func create_depth_correction ()-> Projection {
        abort ()
    }
    
    func create_light_atlas_rect ()-> Projection {
        abort ()
    }
    
    func create_perspective ()-> Projection {
        abort ()
    }
    
    func create_perspective_hmd ()-> Projection {
        abort ()
    }
    
    func create_for_hmd ()-> Projection {
        abort ()
    }
    
    func create_orthogonal ()-> Projection {
        abort ()
    }
    
    func create_orthogonal_aspect ()-> Projection {
        abort ()
    }
    
    func create_frustum ()-> Projection {
        abort ()
    }
    
    func create_frustum_aspect ()-> Projection {
        abort ()
    }
    
    func create_fit_aabb ()-> Projection {
        abort ()
    }
    
    func determinant ()-> Float {
        abort ()
    }
    
    func perspective_znear_adjusted ()-> Projection {
        abort ()
    }
    
    func get_projection_plane ()-> Plane {
        abort ()
    }
    
    func flipped_y ()-> Projection {
        abort ()
    }
    
    func jitter_offseted ()-> Projection {
        abort ()
    }
    
    func get_fovy ()-> Float {
        abort ()
    }
    
    func get_z_far ()-> Float {
        abort ()
    }
    
    func get_z_near ()-> Float {
        abort ()
    }
    
    func get_aspect ()-> Float {
        abort ()
    }
    
    func get_fov ()-> Float {
        abort ()
    }
    
    func is_orthogonal ()-> Bool {
        abort ()
    }
    
    func get_viewport_half_extents ()-> Vector2 {
        abort ()
    }
    
    func get_far_plane_half_extents ()-> Vector2 {
        abort ()
    }
    
    func inverse ()-> Projection {
        abort ()
    }
    
    func get_pixels_per_meter ()-> Int32 {
        abort ()
    }
    
    func get_lod_multiplier ()-> Float {
        abort ()
    }
    
}

public struct Color  {
    var r: Float
    var g: Float
    var b: Float
    var a: Float
    var r8: Int32
    var g8: Int32
    var b8: Int32
    var a8: Int32
    var h: Float
    var s: Float
    var v: Float
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 0)!
    
    public init () {
        
        Color.constructor0 (&self, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 1)!
    
    public init (from: Color) {
        var copy_from = from
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Color true - copy_from argRef:copy_from
        ]
        
        Color.constructor1 (&self, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 2)!
    
    public init (from: Color, alpha: Float) {
        var copy_from = from
        var copy_alpha = alpha
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_from), // isCoreType: Color true - copy_from argRef:copy_from
            UnsafeRawPointer(&copy_alpha), // isCoreType: float false - copy_alpha argRef:copy_alpha
        ]
        
        Color.constructor2 (&self, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 3)!
    
    public init (r: Float, g: Float, b: Float) {
        var copy_r = r
        var copy_g = g
        var copy_b = b
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_r), // isCoreType: float false - copy_r argRef:copy_r
            UnsafeRawPointer(&copy_g), // isCoreType: float false - copy_g argRef:copy_g
            UnsafeRawPointer(&copy_b), // isCoreType: float false - copy_b argRef:copy_b
        ]
        
        Color.constructor3 (&self, &args)
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 4)!
    
    public init (r: Float, g: Float, b: Float, a: Float) {
        var copy_r = r
        var copy_g = g
        var copy_b = b
        var copy_a = a
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&copy_r), // isCoreType: float false - copy_r argRef:copy_r
            UnsafeRawPointer(&copy_g), // isCoreType: float false - copy_g argRef:copy_g
            UnsafeRawPointer(&copy_b), // isCoreType: float false - copy_b argRef:copy_b
            UnsafeRawPointer(&copy_a), // isCoreType: float false - copy_a argRef:copy_a
        ]
        
        Color.constructor4 (&self, &args)
    }
    
    static var constructor5: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 5)!
    
    public init (code: GString) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&code.handle),
        ]
        
        Color.constructor5 (&self, &args)
    }
    
    static var constructor6: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 6)!
    
    public init (code: GString, alpha: Float) {
        var copy_alpha = alpha
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&code.handle),
            UnsafeRawPointer(&copy_alpha), // isCoreType: float false - copy_alpha argRef:copy_alpha
        ]
        
        Color.constructor6 (&self, &args)
    }
    
    func to_argb32 ()-> Int32 {
        abort ()
    }
    
    func to_abgr32 ()-> Int32 {
        abort ()
    }
    
    func to_rgba32 ()-> Int32 {
        abort ()
    }
    
    func to_argb64 ()-> Int32 {
        abort ()
    }
    
    func to_abgr64 ()-> Int32 {
        abort ()
    }
    
    func to_rgba64 ()-> Int32 {
        abort ()
    }
    
    func to_html ()-> String {
        abort ()
    }
    
    func clamp ()-> Color {
        abort ()
    }
    
    func inverted ()-> Color {
        abort ()
    }
    
    func lerp ()-> Color {
        abort ()
    }
    
    func lightened ()-> Color {
        abort ()
    }
    
    func darkened ()-> Color {
        abort ()
    }
    
    func blend ()-> Color {
        abort ()
    }
    
    func get_luminance ()-> Float {
        abort ()
    }
    
    func srgb_to_linear ()-> Color {
        abort ()
    }
    
    func linear_to_srgb ()-> Color {
        abort ()
    }
    
    func is_equal_approx ()-> Bool {
        abort ()
    }
    
    func hex ()-> Color {
        abort ()
    }
    
    func hex64 ()-> Color {
        abort ()
    }
    
    func html ()-> Color {
        abort ()
    }
    
    func html_is_valid ()-> Bool {
        abort ()
    }
    
    func from_string ()-> Color {
        abort ()
    }
    
    func from_hsv ()-> Color {
        abort ()
    }
    
    func from_ok_hsl ()-> Color {
        abort ()
    }
    
    func from_rgbe9995 ()-> Color {
        abort ()
    }
    
}

public class StringName  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING_NAME, 0)!
    
    public init () {
        
        StringName.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING_NAME, 1)!
    
    public init (from: StringName) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        StringName.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING_NAME, 2)!
    
    public init (from: GString) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        StringName.constructor2 (&handle, &args)
    }
    
    func casecmp_to ()-> Int32 {
        abort ()
    }
    
    func nocasecmp_to ()-> Int32 {
        abort ()
    }
    
    func naturalnocasecmp_to ()-> Int32 {
        abort ()
    }
    
    func length ()-> Int32 {
        abort ()
    }
    
    func substr ()-> String {
        abort ()
    }
    
    func get_slice ()-> String {
        abort ()
    }
    
    func get_slicec ()-> String {
        abort ()
    }
    
    func get_slice_count ()-> Int32 {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
    func countn ()-> Int32 {
        abort ()
    }
    
    func findn ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func rfindn ()-> Int32 {
        abort ()
    }
    
    func match ()-> Bool {
        abort ()
    }
    
    func matchn ()-> Bool {
        abort ()
    }
    
    func begins_with ()-> Bool {
        abort ()
    }
    
    func ends_with ()-> Bool {
        abort ()
    }
    
    func is_subsequence_of ()-> Bool {
        abort ()
    }
    
    func is_subsequence_ofn ()-> Bool {
        abort ()
    }
    
    func bigrams ()-> PackedStringArray {
        abort ()
    }
    
    func similarity ()-> Float {
        abort ()
    }
    
    func format ()-> String {
        abort ()
    }
    
    func replace ()-> String {
        abort ()
    }
    
    func replacen ()-> String {
        abort ()
    }
    
    func insert ()-> String {
        abort ()
    }
    
    func capitalize ()-> String {
        abort ()
    }
    
    func to_camel_case ()-> String {
        abort ()
    }
    
    func to_pascal_case ()-> String {
        abort ()
    }
    
    func to_snake_case ()-> String {
        abort ()
    }
    
    func split ()-> PackedStringArray {
        abort ()
    }
    
    func rsplit ()-> PackedStringArray {
        abort ()
    }
    
    func split_floats ()-> PackedFloat64Array {
        abort ()
    }
    
    func join ()-> String {
        abort ()
    }
    
    func to_upper ()-> String {
        abort ()
    }
    
    func to_lower ()-> String {
        abort ()
    }
    
    func left ()-> String {
        abort ()
    }
    
    func right ()-> String {
        abort ()
    }
    
    func strip_edges ()-> String {
        abort ()
    }
    
    func strip_escapes ()-> String {
        abort ()
    }
    
    func lstrip ()-> String {
        abort ()
    }
    
    func rstrip ()-> String {
        abort ()
    }
    
    func get_extension ()-> String {
        abort ()
    }
    
    func get_basename ()-> String {
        abort ()
    }
    
    func path_join ()-> String {
        abort ()
    }
    
    func unicode_at ()-> Int32 {
        abort ()
    }
    
    func indent ()-> String {
        abort ()
    }
    
    func dedent ()-> String {
        abort ()
    }
    
    func md5_text ()-> String {
        abort ()
    }
    
    func sha1_text ()-> String {
        abort ()
    }
    
    func sha256_text ()-> String {
        abort ()
    }
    
    func md5_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func sha1_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func sha256_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func contains ()-> Bool {
        abort ()
    }
    
    func is_absolute_path ()-> Bool {
        abort ()
    }
    
    func is_relative_path ()-> Bool {
        abort ()
    }
    
    func simplify_path ()-> String {
        abort ()
    }
    
    func get_base_dir ()-> String {
        abort ()
    }
    
    func get_file ()-> String {
        abort ()
    }
    
    func xml_escape ()-> String {
        abort ()
    }
    
    func xml_unescape ()-> String {
        abort ()
    }
    
    func uri_encode ()-> String {
        abort ()
    }
    
    func uri_decode ()-> String {
        abort ()
    }
    
    func c_escape ()-> String {
        abort ()
    }
    
    func c_unescape ()-> String {
        abort ()
    }
    
    func json_escape ()-> String {
        abort ()
    }
    
    func validate_node_name ()-> String {
        abort ()
    }
    
    func validate_filename ()-> String {
        abort ()
    }
    
    func is_valid_identifier ()-> Bool {
        abort ()
    }
    
    func is_valid_int ()-> Bool {
        abort ()
    }
    
    func is_valid_float ()-> Bool {
        abort ()
    }
    
    func is_valid_hex_number ()-> Bool {
        abort ()
    }
    
    func is_valid_html_color ()-> Bool {
        abort ()
    }
    
    func is_valid_ip_address ()-> Bool {
        abort ()
    }
    
    func is_valid_filename ()-> Bool {
        abort ()
    }
    
    func to_int ()-> Int32 {
        abort ()
    }
    
    func to_float ()-> Float {
        abort ()
    }
    
    func hex_to_int ()-> Int32 {
        abort ()
    }
    
    func bin_to_int ()-> Int32 {
        abort ()
    }
    
    func lpad ()-> String {
        abort ()
    }
    
    func rpad ()-> String {
        abort ()
    }
    
    func pad_decimals ()-> String {
        abort ()
    }
    
    func pad_zeros ()-> String {
        abort ()
    }
    
    func trim_prefix ()-> String {
        abort ()
    }
    
    func trim_suffix ()-> String {
        abort ()
    }
    
    func to_ascii_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func to_utf8_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func to_utf16_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func to_utf32_buffer ()-> PackedByteArray {
        abort ()
    }
    
    func hash ()-> Int32 {
        abort ()
    }
    
}

public class NodePath  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_NODE_PATH, 0)!
    
    public init () {
        
        NodePath.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_NODE_PATH, 1)!
    
    public init (from: NodePath) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        NodePath.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_NODE_PATH, 2)!
    
    public init (from: GString) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        NodePath.constructor2 (&handle, &args)
    }
    
    func is_absolute ()-> Bool {
        abort ()
    }
    
    func get_name_count ()-> Int32 {
        abort ()
    }
    
    func get_name ()-> StringName {
        abort ()
    }
    
    func get_subname_count ()-> Int32 {
        abort ()
    }
    
    func hash ()-> Int32 {
        abort ()
    }
    
    func get_subname ()-> StringName {
        abort ()
    }
    
    func get_concatenated_names ()-> StringName {
        abort ()
    }
    
    func get_concatenated_subnames ()-> StringName {
        abort ()
    }
    
    func get_as_property_path ()-> NodePath {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
}

public class RID  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RID, 0)!
    
    public init () {
        
        RID.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RID, 1)!
    
    public init (from: RID) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        RID.constructor1 (&handle, &args)
    }
    
    func is_valid ()-> Bool {
        abort ()
    }
    
    func get_id ()-> Int32 {
        abort ()
    }
    
}

public class Callable  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_CALLABLE, 0)!
    
    public init () {
        
        Callable.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_CALLABLE, 1)!
    
    public init (from: Callable) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Callable.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_CALLABLE, 2)!
    
    public init (object: Object, method: StringName) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&object.handle),
            UnsafeRawPointer(&method.handle),
        ]
        
        Callable.constructor2 (&handle, &args)
    }
    
    func callv ()-> Variant {
        abort ()
    }
    
    func is_null ()-> Bool {
        abort ()
    }
    
    func is_custom ()-> Bool {
        abort ()
    }
    
    func is_standard ()-> Bool {
        abort ()
    }
    
    func is_valid ()-> Bool {
        abort ()
    }
    
    func get_object ()-> Object {
        abort ()
    }
    
    func get_object_id ()-> Int32 {
        abort ()
    }
    
    func get_method ()-> StringName {
        abort ()
    }
    
    func get_bound_arguments_count ()-> Int32 {
        abort ()
    }
    
    func get_bound_arguments ()-> Array {
        abort ()
    }
    
    func hash ()-> Int32 {
        abort ()
    }
    
    func bindv ()-> Callable {
        abort ()
    }
    
    func unbind ()-> Callable {
        abort ()
    }
    
    func call ()-> Variant {
        abort ()
    }
    
    func call_deferred () {
        abort ()
    }
    
    func rpc () {
        abort ()
    }
    
    func rpc_id () {
        abort ()
    }
    
    func bind ()-> Callable {
        abort ()
    }
    
}

public class Signal  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_SIGNAL, 0)!
    
    public init () {
        
        Signal.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_SIGNAL, 1)!
    
    public init (from: Signal) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Signal.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_SIGNAL, 2)!
    
    public init (object: Object, signal: StringName) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&object.handle),
            UnsafeRawPointer(&signal.handle),
        ]
        
        Signal.constructor2 (&handle, &args)
    }
    
    func is_null ()-> Bool {
        abort ()
    }
    
    func get_object ()-> Object {
        abort ()
    }
    
    func get_object_id ()-> Int32 {
        abort ()
    }
    
    func get_name ()-> StringName {
        abort ()
    }
    
    func connect ()-> Int32 {
        abort ()
    }
    
    func disconnect () {
        abort ()
    }
    
    func is_connected ()-> Bool {
        abort ()
    }
    
    func get_connections ()-> Array {
        abort ()
    }
    
    func emit () {
        abort ()
    }
    
}

public class Dictionary  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_DICTIONARY, 0)!
    
    public init () {
        
        Dictionary.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_DICTIONARY, 1)!
    
    public init (from: Dictionary) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Dictionary.constructor1 (&handle, &args)
    }
    
    func size ()-> Int32 {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func clear () {
        abort ()
    }
    
    func merge () {
        abort ()
    }
    
    func has ()-> Bool {
        abort ()
    }
    
    func has_all ()-> Bool {
        abort ()
    }
    
    func find_key ()-> Variant {
        abort ()
    }
    
    func erase ()-> Bool {
        abort ()
    }
    
    func hash ()-> Int32 {
        abort ()
    }
    
    func keys ()-> Array {
        abort ()
    }
    
    func values ()-> Array {
        abort ()
    }
    
    func duplicate ()-> Dictionary {
        abort ()
    }
    
    func get ()-> Variant {
        abort ()
    }
    
    func make_read_only () {
        abort ()
    }
    
    func is_read_only ()-> Bool {
        abort ()
    }
    
}

public class Array  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 0)!
    
    public init () {
        
        Array.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 1)!
    
    public init (from: Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Array.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 2)!
    
    public init (base: Array, type: Int, className: StringName, script: Variant) {
        var copy_type = type
        var copy_script = script
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&base.handle),
            UnsafeRawPointer(&copy_type), // isCoreType: int false - copy_type argRef:copy_type
            UnsafeRawPointer(&className.handle),
            UnsafeRawPointer(&copy_script), // isCoreType: Variant true - copy_script argRef:copy_script
        ]
        
        Array.constructor2 (&handle, &args)
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 3)!
    
    public init (from: PackedByteArray) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Array.constructor3 (&handle, &args)
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 4)!
    
    public init (from: PackedInt32Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Array.constructor4 (&handle, &args)
    }
    
    static var constructor5: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 5)!
    
    public init (from: PackedInt64Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Array.constructor5 (&handle, &args)
    }
    
    static var constructor6: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 6)!
    
    public init (from: PackedFloat32Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Array.constructor6 (&handle, &args)
    }
    
    static var constructor7: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 7)!
    
    public init (from: PackedFloat64Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Array.constructor7 (&handle, &args)
    }
    
    static var constructor8: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 8)!
    
    public init (from: PackedStringArray) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Array.constructor8 (&handle, &args)
    }
    
    static var constructor9: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 9)!
    
    public init (from: PackedVector2Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Array.constructor9 (&handle, &args)
    }
    
    static var constructor10: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 10)!
    
    public init (from: PackedVector3Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Array.constructor10 (&handle, &args)
    }
    
    static var constructor11: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_ARRAY, 11)!
    
    public init (from: PackedColorArray) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        Array.constructor11 (&handle, &args)
    }
    
    func size ()-> Int32 {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func clear () {
        abort ()
    }
    
    func hash ()-> Int32 {
        abort ()
    }
    
    func assign () {
        abort ()
    }
    
    func push_back () {
        abort ()
    }
    
    func push_front () {
        abort ()
    }
    
    func append () {
        abort ()
    }
    
    func append_array () {
        abort ()
    }
    
    func resize ()-> Int32 {
        abort ()
    }
    
    func insert ()-> Int32 {
        abort ()
    }
    
    func remove_at () {
        abort ()
    }
    
    func fill () {
        abort ()
    }
    
    func erase () {
        abort ()
    }
    
    func front ()-> Variant {
        abort ()
    }
    
    func back ()-> Variant {
        abort ()
    }
    
    func pick_random ()-> Variant {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
    func has ()-> Bool {
        abort ()
    }
    
    func pop_back ()-> Variant {
        abort ()
    }
    
    func pop_front ()-> Variant {
        abort ()
    }
    
    func pop_at ()-> Variant {
        abort ()
    }
    
    func sort () {
        abort ()
    }
    
    func sort_custom () {
        abort ()
    }
    
    func shuffle () {
        abort ()
    }
    
    func bsearch ()-> Int32 {
        abort ()
    }
    
    func bsearch_custom ()-> Int32 {
        abort ()
    }
    
    func reverse () {
        abort ()
    }
    
    func duplicate ()-> Array {
        abort ()
    }
    
    func slice ()-> Array {
        abort ()
    }
    
    func filter ()-> Array {
        abort ()
    }
    
    func map ()-> Array {
        abort ()
    }
    
    func reduce ()-> Variant {
        abort ()
    }
    
    func any ()-> Bool {
        abort ()
    }
    
    func all ()-> Bool {
        abort ()
    }
    
    func max ()-> Variant {
        abort ()
    }
    
    func min ()-> Variant {
        abort ()
    }
    
    func is_typed ()-> Bool {
        abort ()
    }
    
    func is_same_typed ()-> Bool {
        abort ()
    }
    
    func get_typed_builtin ()-> Int32 {
        abort ()
    }
    
    func get_typed_class_name ()-> StringName {
        abort ()
    }
    
    func get_typed_script ()-> Variant {
        abort ()
    }
    
    func make_read_only () {
        abort ()
    }
    
    func is_read_only ()-> Bool {
        abort ()
    }
    
}

public class PackedByteArray  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, 0)!
    
    public init () {
        
        PackedByteArray.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, 1)!
    
    public init (from: PackedByteArray) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedByteArray.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, 2)!
    
    public init (from: Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedByteArray.constructor2 (&handle, &args)
    }
    
    func size ()-> Int32 {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func set () {
        abort ()
    }
    
    func push_back ()-> Bool {
        abort ()
    }
    
    func append ()-> Bool {
        abort ()
    }
    
    func append_array () {
        abort ()
    }
    
    func remove_at () {
        abort ()
    }
    
    func insert ()-> Int32 {
        abort ()
    }
    
    func fill () {
        abort ()
    }
    
    func resize ()-> Int32 {
        abort ()
    }
    
    func clear () {
        abort ()
    }
    
    func has ()-> Bool {
        abort ()
    }
    
    func reverse () {
        abort ()
    }
    
    func slice ()-> PackedByteArray {
        abort ()
    }
    
    func sort () {
        abort ()
    }
    
    func bsearch ()-> Int32 {
        abort ()
    }
    
    func duplicate ()-> PackedByteArray {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
    func get_string_from_ascii ()-> String {
        abort ()
    }
    
    func get_string_from_utf8 ()-> String {
        abort ()
    }
    
    func get_string_from_utf16 ()-> String {
        abort ()
    }
    
    func get_string_from_utf32 ()-> String {
        abort ()
    }
    
    func hex_encode ()-> String {
        abort ()
    }
    
    func compress ()-> PackedByteArray {
        abort ()
    }
    
    func decompress ()-> PackedByteArray {
        abort ()
    }
    
    func decompress_dynamic ()-> PackedByteArray {
        abort ()
    }
    
    func decode_u8 ()-> Int32 {
        abort ()
    }
    
    func decode_s8 ()-> Int32 {
        abort ()
    }
    
    func decode_u16 ()-> Int32 {
        abort ()
    }
    
    func decode_s16 ()-> Int32 {
        abort ()
    }
    
    func decode_u32 ()-> Int32 {
        abort ()
    }
    
    func decode_s32 ()-> Int32 {
        abort ()
    }
    
    func decode_u64 ()-> Int32 {
        abort ()
    }
    
    func decode_s64 ()-> Int32 {
        abort ()
    }
    
    func decode_half ()-> Float {
        abort ()
    }
    
    func decode_float ()-> Float {
        abort ()
    }
    
    func decode_double ()-> Float {
        abort ()
    }
    
    func has_encoded_var ()-> Bool {
        abort ()
    }
    
    func decode_var ()-> Variant {
        abort ()
    }
    
    func decode_var_size ()-> Int32 {
        abort ()
    }
    
    func to_int32_array ()-> PackedInt32Array {
        abort ()
    }
    
    func to_int64_array ()-> PackedInt64Array {
        abort ()
    }
    
    func to_float32_array ()-> PackedFloat32Array {
        abort ()
    }
    
    func to_float64_array ()-> PackedFloat64Array {
        abort ()
    }
    
    func encode_u8 () {
        abort ()
    }
    
    func encode_s8 () {
        abort ()
    }
    
    func encode_u16 () {
        abort ()
    }
    
    func encode_s16 () {
        abort ()
    }
    
    func encode_u32 () {
        abort ()
    }
    
    func encode_s32 () {
        abort ()
    }
    
    func encode_u64 () {
        abort ()
    }
    
    func encode_s64 () {
        abort ()
    }
    
    func encode_half () {
        abort ()
    }
    
    func encode_float () {
        abort ()
    }
    
    func encode_double () {
        abort ()
    }
    
    func encode_var ()-> Int32 {
        abort ()
    }
    
}

public class PackedInt32Array  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, 0)!
    
    public init () {
        
        PackedInt32Array.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, 1)!
    
    public init (from: PackedInt32Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedInt32Array.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, 2)!
    
    public init (from: Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedInt32Array.constructor2 (&handle, &args)
    }
    
    func size ()-> Int32 {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func set () {
        abort ()
    }
    
    func push_back ()-> Bool {
        abort ()
    }
    
    func append ()-> Bool {
        abort ()
    }
    
    func append_array () {
        abort ()
    }
    
    func remove_at () {
        abort ()
    }
    
    func insert ()-> Int32 {
        abort ()
    }
    
    func fill () {
        abort ()
    }
    
    func resize ()-> Int32 {
        abort ()
    }
    
    func clear () {
        abort ()
    }
    
    func has ()-> Bool {
        abort ()
    }
    
    func reverse () {
        abort ()
    }
    
    func slice ()-> PackedInt32Array {
        abort ()
    }
    
    func to_byte_array ()-> PackedByteArray {
        abort ()
    }
    
    func sort () {
        abort ()
    }
    
    func bsearch ()-> Int32 {
        abort ()
    }
    
    func duplicate ()-> PackedInt32Array {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
}

public class PackedInt64Array  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, 0)!
    
    public init () {
        
        PackedInt64Array.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, 1)!
    
    public init (from: PackedInt64Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedInt64Array.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, 2)!
    
    public init (from: Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedInt64Array.constructor2 (&handle, &args)
    }
    
    func size ()-> Int32 {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func set () {
        abort ()
    }
    
    func push_back ()-> Bool {
        abort ()
    }
    
    func append ()-> Bool {
        abort ()
    }
    
    func append_array () {
        abort ()
    }
    
    func remove_at () {
        abort ()
    }
    
    func insert ()-> Int32 {
        abort ()
    }
    
    func fill () {
        abort ()
    }
    
    func resize ()-> Int32 {
        abort ()
    }
    
    func clear () {
        abort ()
    }
    
    func has ()-> Bool {
        abort ()
    }
    
    func reverse () {
        abort ()
    }
    
    func slice ()-> PackedInt64Array {
        abort ()
    }
    
    func to_byte_array ()-> PackedByteArray {
        abort ()
    }
    
    func sort () {
        abort ()
    }
    
    func bsearch ()-> Int32 {
        abort ()
    }
    
    func duplicate ()-> PackedInt64Array {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
}

public class PackedFloat32Array  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, 0)!
    
    public init () {
        
        PackedFloat32Array.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, 1)!
    
    public init (from: PackedFloat32Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedFloat32Array.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, 2)!
    
    public init (from: Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedFloat32Array.constructor2 (&handle, &args)
    }
    
    func size ()-> Int32 {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func set () {
        abort ()
    }
    
    func push_back ()-> Bool {
        abort ()
    }
    
    func append ()-> Bool {
        abort ()
    }
    
    func append_array () {
        abort ()
    }
    
    func remove_at () {
        abort ()
    }
    
    func insert ()-> Int32 {
        abort ()
    }
    
    func fill () {
        abort ()
    }
    
    func resize ()-> Int32 {
        abort ()
    }
    
    func clear () {
        abort ()
    }
    
    func has ()-> Bool {
        abort ()
    }
    
    func reverse () {
        abort ()
    }
    
    func slice ()-> PackedFloat32Array {
        abort ()
    }
    
    func to_byte_array ()-> PackedByteArray {
        abort ()
    }
    
    func sort () {
        abort ()
    }
    
    func bsearch ()-> Int32 {
        abort ()
    }
    
    func duplicate ()-> PackedFloat32Array {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
}

public class PackedFloat64Array  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, 0)!
    
    public init () {
        
        PackedFloat64Array.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, 1)!
    
    public init (from: PackedFloat64Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedFloat64Array.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, 2)!
    
    public init (from: Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedFloat64Array.constructor2 (&handle, &args)
    }
    
    func size ()-> Int32 {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func set () {
        abort ()
    }
    
    func push_back ()-> Bool {
        abort ()
    }
    
    func append ()-> Bool {
        abort ()
    }
    
    func append_array () {
        abort ()
    }
    
    func remove_at () {
        abort ()
    }
    
    func insert ()-> Int32 {
        abort ()
    }
    
    func fill () {
        abort ()
    }
    
    func resize ()-> Int32 {
        abort ()
    }
    
    func clear () {
        abort ()
    }
    
    func has ()-> Bool {
        abort ()
    }
    
    func reverse () {
        abort ()
    }
    
    func slice ()-> PackedFloat64Array {
        abort ()
    }
    
    func to_byte_array ()-> PackedByteArray {
        abort ()
    }
    
    func sort () {
        abort ()
    }
    
    func bsearch ()-> Int32 {
        abort ()
    }
    
    func duplicate ()-> PackedFloat64Array {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
}

public class PackedStringArray  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, 0)!
    
    public init () {
        
        PackedStringArray.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, 1)!
    
    public init (from: PackedStringArray) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedStringArray.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, 2)!
    
    public init (from: Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedStringArray.constructor2 (&handle, &args)
    }
    
    func size ()-> Int32 {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func set () {
        abort ()
    }
    
    func push_back ()-> Bool {
        abort ()
    }
    
    func append ()-> Bool {
        abort ()
    }
    
    func append_array () {
        abort ()
    }
    
    func remove_at () {
        abort ()
    }
    
    func insert ()-> Int32 {
        abort ()
    }
    
    func fill () {
        abort ()
    }
    
    func resize ()-> Int32 {
        abort ()
    }
    
    func clear () {
        abort ()
    }
    
    func has ()-> Bool {
        abort ()
    }
    
    func reverse () {
        abort ()
    }
    
    func slice ()-> PackedStringArray {
        abort ()
    }
    
    func to_byte_array ()-> PackedByteArray {
        abort ()
    }
    
    func sort () {
        abort ()
    }
    
    func bsearch ()-> Int32 {
        abort ()
    }
    
    func duplicate ()-> PackedStringArray {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
}

public class PackedVector2Array  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, 0)!
    
    public init () {
        
        PackedVector2Array.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, 1)!
    
    public init (from: PackedVector2Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedVector2Array.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, 2)!
    
    public init (from: Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedVector2Array.constructor2 (&handle, &args)
    }
    
    func size ()-> Int32 {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func set () {
        abort ()
    }
    
    func push_back ()-> Bool {
        abort ()
    }
    
    func append ()-> Bool {
        abort ()
    }
    
    func append_array () {
        abort ()
    }
    
    func remove_at () {
        abort ()
    }
    
    func insert ()-> Int32 {
        abort ()
    }
    
    func fill () {
        abort ()
    }
    
    func resize ()-> Int32 {
        abort ()
    }
    
    func clear () {
        abort ()
    }
    
    func has ()-> Bool {
        abort ()
    }
    
    func reverse () {
        abort ()
    }
    
    func slice ()-> PackedVector2Array {
        abort ()
    }
    
    func to_byte_array ()-> PackedByteArray {
        abort ()
    }
    
    func sort () {
        abort ()
    }
    
    func bsearch ()-> Int32 {
        abort ()
    }
    
    func duplicate ()-> PackedVector2Array {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
}

public class PackedVector3Array  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, 0)!
    
    public init () {
        
        PackedVector3Array.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, 1)!
    
    public init (from: PackedVector3Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedVector3Array.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, 2)!
    
    public init (from: Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedVector3Array.constructor2 (&handle, &args)
    }
    
    func size ()-> Int32 {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func set () {
        abort ()
    }
    
    func push_back ()-> Bool {
        abort ()
    }
    
    func append ()-> Bool {
        abort ()
    }
    
    func append_array () {
        abort ()
    }
    
    func remove_at () {
        abort ()
    }
    
    func insert ()-> Int32 {
        abort ()
    }
    
    func fill () {
        abort ()
    }
    
    func resize ()-> Int32 {
        abort ()
    }
    
    func clear () {
        abort ()
    }
    
    func has ()-> Bool {
        abort ()
    }
    
    func reverse () {
        abort ()
    }
    
    func slice ()-> PackedVector3Array {
        abort ()
    }
    
    func to_byte_array ()-> PackedByteArray {
        abort ()
    }
    
    func sort () {
        abort ()
    }
    
    func bsearch ()-> Int32 {
        abort ()
    }
    
    func duplicate ()-> PackedVector3Array {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
}

public class PackedColorArray  {
    var handle: OpaquePointer?
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, 0)!
    
    public init () {
        
        PackedColorArray.constructor0 (&handle, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, 1)!
    
    public init (from: PackedColorArray) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedColorArray.constructor1 (&handle, &args)
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, 2)!
    
    public init (from: Array) {
        var args: [UnsafeRawPointer?] = [
            UnsafeRawPointer(&from.handle),
        ]
        
        PackedColorArray.constructor2 (&handle, &args)
    }
    
    func size ()-> Int32 {
        abort ()
    }
    
    func is_empty ()-> Bool {
        abort ()
    }
    
    func set () {
        abort ()
    }
    
    func push_back ()-> Bool {
        abort ()
    }
    
    func append ()-> Bool {
        abort ()
    }
    
    func append_array () {
        abort ()
    }
    
    func remove_at () {
        abort ()
    }
    
    func insert ()-> Int32 {
        abort ()
    }
    
    func fill () {
        abort ()
    }
    
    func resize ()-> Int32 {
        abort ()
    }
    
    func clear () {
        abort ()
    }
    
    func has ()-> Bool {
        abort ()
    }
    
    func reverse () {
        abort ()
    }
    
    func slice ()-> PackedColorArray {
        abort ()
    }
    
    func to_byte_array ()-> PackedByteArray {
        abort ()
    }
    
    func sort () {
        abort ()
    }
    
    func bsearch ()-> Int32 {
        abort ()
    }
    
    func duplicate ()-> PackedColorArray {
        abort ()
    }
    
    func find ()-> Int32 {
        abort ()
    }
    
    func rfind ()-> Int32 {
        abort ()
    }
    
    func count ()-> Int32 {
        abort ()
    }
    
}

